===============================================================================
                                  Nalu-Wind                                    
       An incompressible, turbulent computational fluid dynamics solver        
                  for wind turbine and wind farm simulations                   
===============================================================================

   Nalu-Wind Version: v1.2.0
   Nalu-Wind GIT Commit SHA: a134dd0da2207e4a585b6a7af1b7fb0d8eb5bac3
   Trilinos Version: 12.17-g53faaaa

   TPLs: Boost, HDF5, netCDF, STK, Trilinos, yaml-cpp and zlib   
   Optional TPLs enabled: OpenFAST, Hypre
   Copyright 2017 National Technology & Engineering Solutions of Sandia, LLC   
   (NTESS), National Renewable Energy Laboratory, University of Texas Austin,  
    Northwest Research Associates. Under the terms of Contract DE-NA0003525    
    with NTESS, the U.S. Government retains certain rights in this software.   
                                                                               
           This software is released under the BSD 3-clause license.           
   See LICENSE file at https://github.com/exawind/nalu-wind for more details.  
-------------------------------------------------------------------------------


Realm Options Review: realm_1
===========================
Edge-based scheme will be activated
Warning: When using automatic_decomposition_type, one must have a serial file
Nalu will deactivate aura ghosting

Turbulence Model Review:   
===========================
Turbulence Model is: laminar 0

PPE review:   
===========================
Realm::create_mesh(): Begin
Realm::create_mesh() End

Boundary Condition Review: 
===========================
Periodic BC name:    bc_left_right between surface_1 and surface_2
Periodic BC name:    front_back between surface_3 and surface_4
Periodic BC name:    top_bot between surface_5 and surface_6

Initial Condition Review:  
===========================
Initial Is Type user-function 

Material Prop Review:      
===========================
density is a constant property: 1
viscosity is a constant property: 0.000625

EqSys/options Review:      
===========================
Edge projected nodal gradient for velocity: 1
Edge projected nodal gradient for pressure: 1

Realm memory Review:       realm_1
===========================
Node count from meta data = 7849405
Total memory estimate for Matrix solve (per core)= 0.185043 GB.
Total memory estimate (per core) = 0.185043 GB.

Time Integrator Review:  
=========================
StandardTimeIntegrator 
 name=              ti_1
 second order =     1
 totalSimTime =     20
 fixed time step is active   with time step: 0.02
StandardTimeIntegrator realm_name[0]= realm_1

Transfer Review:         
=========================
Realm::initialize() Begin 
Created algorithm = Alg0000_elem_HEXAHEDRON_8_geometry
Created algorithm = Alg0000_elem_HEXAHEDRON_8_courant_reynolds
Created algorithm = Alg0000_edge_momentum_nodal_grad
Created algorithm = Alg0000_edge_continuity_nodal_grad
Created algorithm = Alg0000_edge_mdot_edge_interior
PeriodicManager::search method not declared; will use stk_kdtree
PeriodicManager::search method not declared; will use stk_kdtree
PeriodicManager::search method not declared; will use stk_kdtree

Averaging Review: one
===========================
Primitive/Reynolds name: density/density_ra_one size 1
Mean resolved kinetic energy will be computed
===========================
Realm::ioBroker_->populate_mesh() Begin
Realm::ioBroker_->populate_mesh() End
Realm::create_edges(): Nalu Realm: realm_1 requires edge creation: Begin
Realm::create_edges(): Nalu Realm: realm_1 requires edge creation: End
Realm::ioBroker_->populate_field_data() Begin
Realm::ioBroker_->populate_field_data() End
Realm::create_output_mesh(): Begin
 Sorry, no field by the name effective_viscosity_h
 Sorry, no field by the name effective_viscosity_u
Realm::create_output_mesh() End

